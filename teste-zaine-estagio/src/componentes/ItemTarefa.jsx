// Importa√ß√£o b√°sica
import React from "react";

/**
 * Este √© o componente 'ItemTarefa', o componente "filho" final.
 * Ele √© puramente "apresentacional" (presentational/dumb). Sua √∫nica responsabilidade 
 * √© renderizar a UI para *uma* √∫nica tarefa, baseado exatamente no que ele recebe via props.
 * * Ele recebe:
 * 1. 'tarefa': O objeto *espec√≠fico* da tarefa que ele deve renderizar.
 * 2. 'onRemover': A fun√ß√£o callback (vinda do pai) para deletar.
 * 3. 'onAlternar': A fun√ß√£o callback (vinda do pai) para alternar o status (conclu√≠do/pendente).
 * * √â neste componente que as fun√ß√µes (que foram passadas por 'prop drilling') 
 * s√£o finalmente *invocadas* em resposta a eventos do usu√°rio (cliques).
 */
function ItemTarefa({ tarefa, onRemover, onAlternar }) {
  
  return (
    /* * Eu renderizo um <li>, o que √© semanticamente correto, j√° que o pai (ListaTarefas) √© um <ul>.
     * A classe dele √© din√¢mica: Eu uso uma template literal e um operador tern√°rio.
     * Se 'tarefa.concluida' for true, eu adiciono a classe "completed".
     * Eu usaria essa classe no CSS para aplicar estilos, como um 'text-decoration: line-through'.
     * Isso garante que a UI sempre reflita o estado atual da 'tarefa'.
     */
    <li className={`task-item ${tarefa.concluida ? "completed" : ""}`}>
      
      {/* Este √© o bot√£o de "toggle" (alternar status) */}
      <button className="toggle-btn" 
        /* * No 'onClick', eu chamo a fun√ß√£o 'onAlternar' que recebi via props.
         * Crucialmente, eu passo o 'tarefa.id' como argumento.
         * Eu preciso usar uma arrow function '() =>' aqui para garantir que 
         * 'onAlternar' s√≥ seja chamado *quando* o usu√°rio clicar, e para que eu possa 
         * passar o ID espec√≠fico desta tarefa.
         * Isso "levanta o estado": o pai receber√° o ID e saber√° qual item atualizar.
         */
        onClick={() => onAlternar(tarefa.id)}
      >
        {/* O conte√∫do do bot√£o tamb√©m √© din√¢mico: se a tarefa estiver conclu√≠da, 
          eu mostro um 'check' (‚úì), sen√£o, mostro um c√≠rculo (‚óã). */}
        {tarefa.concluida ? "‚úì" : "‚óã"}
      </button>

      {/* Eu simplesmente renderizo o texto da tarefa, que recebi via 'tarefa.texto' */}
      <span className="task-text">{tarefa.texto}</span>

      {/* Bot√£o de Remover */}
      <button className="remove-btn" 
        /* * A l√≥gica √© id√™ntica ao bot√£o de toggle. No clique, eu chamo a fun√ß√£o 'onRemover' (prop)
         * e passo o 'tarefa.id' deste item. 
         * O componente pai que gerencia o estado da lista completa ir√° receber este ID 
         * e us√°-lo para filtrar o array, removendo esta tarefa.
         */
        onClick={() => onRemover(tarefa.id)}
      >
        üóëÔ∏è
      </button>
    </li>
  );
}

// Eu exporto o ItemTarefa para que o componente 'ListaTarefas' possa import√°-lo e us√°-lo 
// dentro do seu loop .map().
export default ItemTarefa;